from QuantConnect import * from QuantConnect.Algorithm import * from QuantConnect.Data import * from QuantConnect.MachineLearning import * from sklearn.ensemble import RandomForestClassifier from sklearn.preprocessing import StandardScaler class MLMomentumQC(QCAlgorithm): def Initialize(self): self.SetStartDate(2015, 1, 1) self.SetEndDate(2023, 12, 31) self.SetCash(100000) self.symbol = self.AddEquity("SPY", Resolution.Daily).Symbol self.model = RandomForestClassifier(n_estimators=50, max_depth=5) self.scaler = StandardScaler() self.lookback = 252 self.training_interval = 21 # Retrain monthly self.Schedule.On(self.DateRules.MonthStart(self.symbol), self.TimeRules.AfterMarketOpen(self.symbol), self.TrainModel) self.historical_data = [] self.features = ['rsi', 'atr', 'sma50', 'sma200', 'macd'] def OnData(self, data): if self.symbol in data and data[self.symbol] is not None: self.UpdateFeatures(data[self.symbol]) if len(self.historical_data) > self.lookback: current_features = self.GetCurrentFeatures() if self.model is not None: prediction = self.model.predict([current_features])[0] self.SetHoldings(self.symbol, prediction * 0.98) # 98% margin def UpdateFeatures(self, bar): closes = [d.Close for d in self.historical_data[-252:]] if self.historical_data else [] if len(closes) < 50: return current_features = { 'rsi': self.RSI(closes), 'atr': self.ATR(closes), 'sma50': np.mean(closes[-50:]), 'sma200': np.mean(closes[-200:]), 'macd': self.MACD(closes), 'target': 1 if bar.Close > closes[-1] else -1 } self.historical_data.append(current_features) def TrainModel(self): if len(self.historical_data) < self.lookback: return df = pd.DataFrame(self.historical_data[-self.lookback:]) X = self.scaler.fit_transform(df[self.features]) y = df['target'] self.model.fit(X, y) self.Debug(f"Model retrained at {self.Time}") def RSI(self, prices, period=14): deltas = np.diff(prices) gains = np.where(deltas > 0, deltas, 0) losses = np.where(deltas < 0, -deltas, 0) avg_gain = np.mean(gains[-period:]) avg_loss = np.mean(losses[-period:]) return 100 - (100 / (1 + (avg_gain / avg_loss))) if avg_loss != 0 else 100 def ATR(self, prices, period=14): high = max(prices) low = min(prices) return (high - low) if len(prices) >= period else 0 def MACD(self, prices, fast=12, slow=26): fast_ema = pd.Series(prices).ewm(span=fast).mean().iloc[-1] slow_ema = pd.Series(prices).ewm(span=slow).mean().iloc[-1] return fast_ema - slow_ema def GetCurrentFeatures(self): current = self.historical_data[-1] return self.scaler.transform([[ current['rsi'], current['atr'], current['sma50'], current['sma200'], current['macd'] ]])[0]
